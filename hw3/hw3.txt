Homework #3 - 5.19
Christopher Clark (305326742)

Here is my rewritten prefix sum method that uses loop unrolling and reassociation:

void psum3(float a[], float p[], long n)
{
  long i;
  float acc, val1, val2;
  acc = p[0] = a[0];
  for(i = 1; i < n-1; i+=2)
    {
      val1 = a[i];
      val2 = a[i+1];
      p[i] = acc + val1;
      p[i+1] = (acc += (val1 + val2));
    }
  for(; i < n; i++)
    {
      p[i] = (acc += a[i]);
    }
}


I actually had multiple different versions of this method, each one with more val#s, but they seemed
to be slightly slower when I tested their speed with C's time.h module. So, I went with this one.

In terms of CPE, there is a limit on how long the CPE can go when doing the prefix-sum operation.
This is due to two different limits: latency and throughput. Latency is the execution time for a single
task, while throughput is the number of tasks per unit time. Your hardware can only perform a single task so
quickly, so that is a limitation. Furthermore, it can only handle so many tasks at a time so quickly.

Since CPE is dependent on throughput and latency, it can only be brought so low before it can't become any faster.
